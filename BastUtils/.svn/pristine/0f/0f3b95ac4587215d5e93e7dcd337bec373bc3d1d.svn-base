package com.htjx.sdk;

import android.app.Service;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.os.IBinder;

import com.baidu.location.BDLocation;
import com.baidu.location.BDLocationListener;
import com.baidu.location.LocationClient;
import com.baidu.location.LocationClientOption;
import com.baidu.location.LocationClientOption.LocationMode;

public class WatchService extends Service {
	public LocationClient mLocationClient = null;
	public BDLocationListener myListener = new MyLocationListener();
	private InnerLockScreenReceiver lockScreenReceiver;
	private InnerUnLockScreenReceiver unlockScreenReceiver;
	private Context context;
	private SharedPreferences sp;
	private Editor edit;

	@Override
	public IBinder onBind(Intent intent) {
		return null;
	}

	// 如果屏幕关闭锁定
	private class InnerLockScreenReceiver extends BroadcastReceiver {

		@Override
		public void onReceive(Context context, Intent intent) {
		}

	}

	// 如果屏幕解锁
	private class InnerUnLockScreenReceiver extends BroadcastReceiver {

		@Override
		public void onReceive(Context context, Intent intent) {
		 
			String date = sp.getString("date", "");
			boolean isPushEveryDay = sp.getBoolean("isPushEveryDay", true);
			final String formatDate = MyDateUtils.formatDate(System.currentTimeMillis());
			if (isPushEveryDay && !date.equals(formatDate)) {
				if (NetUtil.hasConnectedNetwork(getApplicationContext())) {
					new MyAsyncTask() {
						@Override
						public void onPreExecute() {

						}

						@Override
						public void onPostExecute() {
							edit.putString("date", formatDate);
							edit.commit();
						}

						@Override
						public void doInBackground() {

						}
					}.execute();
				}
			}

		}

	}

	// 初始化需要的广播,对象,集合数据
	@Override
	public void onCreate() {
		context = getApplicationContext();
		sp = context.getSharedPreferences("config",Context.MODE_PRIVATE);
		edit = sp.edit();
		// 定义锁屏的广播接收者
		lockScreenReceiver = new InnerLockScreenReceiver();
		IntentFilter lockFilter = new IntentFilter();
		lockFilter.addAction(Intent.ACTION_SCREEN_OFF);
		lockFilter.setPriority(1000);
		registerReceiver(lockScreenReceiver, lockFilter);
		// 定义解锁的广播接收者
		unlockScreenReceiver = new InnerUnLockScreenReceiver();
		IntentFilter unlockFilter = new IntentFilter();
		unlockFilter.addAction(Intent.ACTION_SCREEN_ON);
		unlockFilter.setPriority(1000);
		registerReceiver(unlockScreenReceiver, unlockFilter);
		super.onCreate();
		startLocation();

	}
	/**
	 * 开始定位
	 */
	private void startLocation() {
		LocationClientOption option = new LocationClientOption();
		// Hight_Accuracy高精度、Battery_Saving低功耗、Device_Sensors仅设备(GPS)
		option.setLocationMode(LocationMode.Battery_Saving);// 设置定位模式
		option.setCoorType("bd09ll");// 返回的定位结果是百度经纬度,默认值gcj02
		option.setScanSpan(200);// 设置发起定位请求的间隔时间为5000ms
		option.setOpenGps(false);
		option.setIsNeedAddress(true);// 返回的定位结果包含地址信息
		option.setNeedDeviceDirect(false);// 返回的定位结果包含手机机头的方向
		mLocationClient = new LocationClient(getApplicationContext()); // 声明LocationClient类
		mLocationClient.setLocOption(option);
		mLocationClient.registerLocationListener(myListener); // 注册监听函数
		if (mLocationClient != null) {
			mLocationClient.start();
			if (mLocationClient.isStarted()) {
				mLocationClient.requestLocation();
			} else {
				LogUtils.d("LocSDK4", "locClient is null or not started");
			}
		}

	}

	@Override
	public void onStart(Intent intent, int startId) {
		super.onStart(intent, startId);
	}

	@Override
	public int onStartCommand(Intent intent, int flags, int startId) {
		flags = START_STICKY;
		return super.onStartCommand(intent, flags, startId);

		// return START_NOT_STICKY;
	}

	@Override
	public void onDestroy() {
		if (lockScreenReceiver != null) {
			unregisterReceiver(lockScreenReceiver);
			lockScreenReceiver = null;
		}
		if (unlockScreenReceiver != null) {
			unregisterReceiver(unlockScreenReceiver);
			unlockScreenReceiver = null;
		}
		super.onDestroy();
		Intent service = new Intent(getApplicationContext(), WatchService.class);
		getApplicationContext().startService(service);

	}

	public class MyLocationListener implements BDLocationListener {
		@Override
		public void onReceiveLocation(BDLocation location) {
			if (location == null)
				return;
			LogUtils.toast(context, " 省:" + location.getProvince() + " 市:"
					+ location.getCity());
			mLocationClient.stop();
		}
	}

}